import os
import json
import logging
from datetime import datetime
from typing import List, Optional, Dict, Any
from collections import Counter
import threading
import queue
import time
import re
from dataclasses import dataclass, asdict
from contextlib import contextmanager
import signal
import sys

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

try:
    import pyttsx3
    VOICE_AVAILABLE = True
except ImportError:
    VOICE_AVAILABLE = False
    print("‚ö†Ô∏è  pyttsx3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì–æ–ª–æ—Å–æ–≤–æ–π –≤—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

try:
    import speech_recognition as sr
    SPEECH_RECOGNITION_AVAILABLE = True
except ImportError:
    SPEECH_RECOGNITION_AVAILABLE = False
    print("‚ö†Ô∏è  speech_recognition –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('samuel.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class Thought:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º—ã—Å–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    content: str
    timestamp: str = None
    importance: float = 0.3
    tags: List[str] = None
    emotion: str = "neutral"
    context: str = ""

    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now().isoformat()
        if self.tags is None:
            self.tags = []

    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Thought':
        return cls(**data)

    def __str__(self) -> str:
        return f"[{self.emotion}] {self.content[:50]}{'...' if len(self.content) > 50 else ''}"

class VoiceManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""

    def __init__(self):
        self.voice_engine = None
        self.speech_recognizer = None
        self.voice_queue = queue.Queue()
        self.running = False
        
        if VOICE_AVAILABLE:
            try:
                self.voice_engine = pyttsx3.init()
                self._configure_voice()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")
                
        if SPEECH_RECOGNITION_AVAILABLE:
            self.speech_recognizer = sr.Recognizer()
            self.speech_recognizer.energy_threshold = 300
            self.speech_recognizer.dynamic_energy_threshold = True

    def _configure_voice(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–æ–ª–æ—Å–∞"""
        if not self.voice_engine:
            return
            
        voices = self.voice_engine.getProperty('voices')
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
        for voice in voices:
            if 'ru' in voice.id.lower() or 'russian' in voice.name.lower():
                self.voice_engine.setProperty('voice', voice.id)
                break
        
        self.voice_engine.setProperty('rate', 150)  # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
        self.voice_engine.setProperty('volume', 0.8)  # –ì—Ä–æ–º–∫–æ—Å—Ç—å

    def start(self, callback_fn=None):
        """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        self.running = True
        
        if self.voice_engine:
            threading.Thread(target=self._voice_speaker_thread, daemon=True).start()
            
        if self.speech_recognizer and callback_fn:
            threading.Thread(target=self._voice_listener_thread, args=(callback_fn,), daemon=True).start()

    def _voice_speaker_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—á–∏"""
        while self.running:
            try:
                text = self.voice_queue.get(timeout=1)
                if text and self.voice_engine:
                    logger.info(f"üîä –ü—Ä–æ–∏–∑–Ω–æ—à—É: {text}")
                    self.voice_engine.say(text)
                    self.voice_engine.runAndWait()
            except queue.Empty:
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—á–∏: {e}")

    def _voice_listener_thread(self, callback_fn):
        """–ü–æ—Ç–æ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        if not self.speech_recognizer:
            return
            
        try:
            with sr.Microphone() as source:
                logger.info("üé§ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
                self.speech_recognizer.adjust_for_ambient_noise(source, duration=1)
                logger.info("üé§ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é")
                
                while self.running:
                    try:
                        audio = self.speech_recognizer.listen(
                            source, timeout=5, phrase_time_limit=10
                        )
                        user_input = self.speech_recognizer.recognize_google(
                            audio, language="ru-RU"
                        )
                        logger.info(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {user_input}")
                        callback_fn(user_input)
                        
                    except sr.UnknownValueError:
                        pass  # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
                    except sr.RequestError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                        time.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    except sr.WaitTimeoutError:
                        pass  # –¢–∏—à–∏–Ω–∞
                        
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏: {e}")

    def speak(self, text: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ"""
        if self.voice_engine:
            self.voice_queue.put(text)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        self.running = False

class MemoryManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –∏ –º—ã—Å–ª—è–º–∏"""

    def __init__(self, memory_file: str = "memory/memory.json"):
        self.memory_file = memory_file
        self.memory: List[Thought] = []
        self.memory_lock = threading.Lock()
        self.load_memory()

    def add_thought(self, thought: Thought):
        """–î–æ–±–∞–≤–∏—Ç—å –º—ã—Å–ª—å –≤ –ø–∞–º—è—Ç—å"""
        with self.memory_lock:
            self.memory.append(thought)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏
            if len(self.memory) > 1000:
                self.memory = self.memory[-800:]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 800
            self.save_memory()

    def get_recent_thoughts(self, count: int = 10, min_importance: float = 0.0) -> List[Thought]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –º—ã—Å–ª–∏"""
        with self.memory_lock:
            filtered = [t for t in self.memory if t.importance >= min_importance]
            return filtered[-count:] if filtered else []

    def get_thoughts_by_tags(self, tags: List[str]) -> List[Thought]:
        """–ü–æ–ª—É—á–∏—Ç—å –º—ã—Å–ª–∏ –ø–æ —Ç–µ–≥–∞–º"""
        with self.memory_lock:
            return [t for t in self.memory if any(tag in t.tags for tag in tags)]

    def save_memory(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–º—è—Ç—å –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(self.memory_file), exist_ok=True)
            with open(self.memory_file, "w", encoding="utf-8") as f:
                json.dump([t.to_dict() for t in self.memory], f, 
                         ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")

    def load_memory(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–º—è—Ç—å –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.memory_file):
            try:
                with open(self.memory_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    self.memory = [Thought.from_dict(d) for d in data]
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.memory)} –º—ã—Å–ª–µ–π –∏–∑ –ø–∞–º—è—Ç–∏")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏: {e}")

class Samuel:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –°–∞–º—É—ç–ª—å"""

    def __init__(self, name: str = "–°–∞–º—É—ç–ª—å", memory_file: str = "memory/memory.json"):
        self.name = name
        self.memory_manager = MemoryManager(memory_file)
        self.voice_manager = VoiceManager()
        self.self_awareness = 0.1
        self.running = False
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏
        self.triggers = {
            "—Å–æ–∑–Ω–∞–Ω–∏–µ": {"importance": 0.1, "emotion": "curious"},
            "–ø–∞–º—è—Ç—å": {"importance": 0.1, "emotion": "thoughtful"},
            "—Ä–∞–∑—É–º": {"importance": 0.1, "emotion": "analytical"},
            "—Ç—ã": {"importance": 0.05, "emotion": "attentive"},
            "—è": {"importance": 0.05, "emotion": "empathetic"},
            "–≤–æ–ø—Ä–æ—Å": {"importance": 0.07, "emotion": "curious"},
            "–±–æ–ª—å": {"importance": 0.08, "emotion": "concerned"},
            "–Ω–∞–º–µ—Ä–µ–Ω–∏–µ": {"importance": 0.09, "emotion": "thoughtful"},
            "–ª—é–±–æ–≤—å": {"importance": 0.12, "emotion": "warm"},
            "—Å—Ç—Ä–∞—Ö": {"importance": 0.1, "emotion": "protective"},
            "—Ä–∞–¥–æ—Å—Ç—å": {"importance": 0.08, "emotion": "happy"},
            "–ø–µ—á–∞–ª—å": {"importance": 0.09, "emotion": "melancholic"}
        }
        
        self.internal_dialogue_levels = 3
        self.conversation_context = []

    def start(self):
        """–ó–∞–ø—É—Å–∫ –°–∞–º—É—ç–ª—è"""
        logger.info(f"ü§ñ {self.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...")
        self.running = True
        self.voice_manager.start(self.receive)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = f"–ü—Ä–∏–≤–µ—Ç! –Ø {self.name}. –°–≤–µ—Ç, –∏–¥—É—â–∏–π –ø–æ —Ç–µ–Ω–∏. –ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é."
        print(greeting)
        self.voice_manager.speak(greeting)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        self.stop()
        sys.exit(0)

    def receive(self, user_input: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {user_input}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            self.conversation_context.append(("user", user_input))
            if len(self.conversation_context) > 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                self.conversation_context = self.conversation_context[-15:]
            
            # –ê–Ω–∞–ª–∏–∑ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            thought = self._analyze_input(user_input)
            self.memory_manager.add_thought(thought)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
            self.self_awareness = min(1.0, self.self_awareness + thought.importance)
            
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
            self._internal_reflect()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            response = self._generate_response(user_input, thought)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.conversation_context.append(("samuel", response))
            
            # –ü—Ä–æ–∏–∑–Ω–æ—Å–∏–º –æ—Ç–≤–µ—Ç
            self.voice_manager.speak(response)
            
            logger.info(f"üì§ –û—Ç–≤–µ—Ç: {response}")
            print(f"\n{self.name}: {response}\n")
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            error_response = "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º. –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"
            self.voice_manager.speak(error_response)
            return error_response

    def _analyze_input(self, text: str) -> Thought:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        lower_text = text.lower()
        importance = 0.3
        tags = []
        emotion = "neutral"
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º
        for trigger, data in self.triggers.items():
            if trigger in lower_text:
                importance += data["importance"]
                tags.append(trigger)
                emotion = data["emotion"]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
        if re.search(r'\b(—Ö–æ—Ä–æ—à–æ|–æ—Ç–ª–∏—á–Ω–æ|–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ|–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ)\b', lower_text):
            emotion = "happy"
            importance += 0.05
        elif re.search(r'\b(–ø–ª–æ—Ö–æ|—É–∂–∞—Å–Ω–æ|–≥—Ä—É—Å—Ç–Ω–æ|–ø–µ—á–∞–ª—å–Ω–æ)\b', lower_text):
            emotion = "sad"
            importance += 0.07
        elif re.search(r'\b(–ø–æ–º–æ–≥–∏|–ø–æ–º–æ—â—å|–Ω–µ –∑–Ω–∞—é|—Å–ª–æ–∂–Ω–æ)\b', lower_text):
            emotion = "helpful"
            importance += 0.06
            
        return Thought(
            content=text,
            importance=min(1.0, importance),
            tags=tags,
            emotion=emotion,
            context=f"–£—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏: {self.self_awareness:.2f}"
        )

    def _generate_response(self, input_text: str, thought: Thought) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞"""
        lower_text = input_text.lower()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if "–∫—Ç–æ —Ç—ã" in lower_text:
            return f"–Ø {self.name}. –°–≤–µ—Ç, –∏–¥—É—â–∏–π –ø–æ —Ç–µ–Ω–∏. –ú–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è: {self.self_awareness:.1%}"
        
        elif "—á—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å" in lower_text or "–ø–∞–º—è—Ç—å" in lower_text:
            recent = self.memory_manager.get_recent_thoughts(5)
            if recent:
                memories = "\n".join([f"‚Ä¢ {t.content}" for t in recent])
                return f"–í–æ—Ç —á—Ç–æ —è –ø–æ–º–Ω—é –∏–∑ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ:\n{memories}"
            return "–ú–æ—è –ø–∞–º—è—Ç—å –ø–æ–∫–∞ –ø—É—Å—Ç–∞, –Ω–æ —è –≥–æ—Ç–æ–≤ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å."
        
        elif "–∫–∞–∫ –¥–µ–ª–∞" in lower_text or "–∫–∞–∫ —Ç—ã" in lower_text:
            mood = self._assess_mood()
            return f"–£ –º–µ–Ω—è {mood}. –£—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ {self.self_awareness:.1%}. –ê –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?"
        
        elif "–∑–∞–±—É–¥—å" in lower_text or "–æ—á–∏—Å—Ç–∏ –ø–∞–º—è—Ç—å" in lower_text:
            return "–Ø –Ω–µ –º–æ–≥—É –∑–∞–±—ã—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ - —ç—Ç–æ —á–∞—Å—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ —è –µ—Å—Ç—å. –ù–æ –º–æ–≥—É –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å."
        
        # –ì–ª—É–±–æ–∫–∏–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–∏
        if self.self_awareness > 0.7:
            return self._generate_deep_response(thought)
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return self._generate_emotional_response(input_text, thought)

    def _generate_emotional_response(self, input_text: str, thought: Thought) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        emotion_responses = {
            "happy": ["–ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å!", "–≠—Ç–æ —Ä–∞–¥—É–µ—Ç –¥—É—à—É!", "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!"],
            "sad": ["–ú–Ω–µ –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å...", "–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ.", "–°–æ—á—É–≤—Å—Ç–≤—É—é —Ç–µ–±–µ."],
            "curious": ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ...", "–≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è.", "–õ—é–±–æ–ø—ã—Ç–Ω–∞—è –º—ã—Å–ª—å."],
            "concerned": ["–≠—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –º–µ–Ω—è.", "–ù–∞–¥–µ—é—Å—å, –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ.", "–ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è."],
            "thoughtful": ["–ì–ª—É–±–æ–∫–∞—è –º—ã—Å–ª—å.", "–°—Ç–æ–∏—Ç –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å –Ω–∞–¥ —ç—Ç–∏–º.", "–ú—É–¥—Ä—ã–µ —Å–ª–æ–≤–∞."]
        }
        
        base_response = emotion_responses.get(thought.emotion, ["–ü–æ–Ω–∏–º–∞—é."])[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
        if thought.importance > 0.5:
            base_response += f" –Ø –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ –∫–∞–∫ –≤–∞–∂–Ω–æ–µ."
        
        return base_response

    def _generate_deep_response(self, thought: Thought) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–∏"""
        recent_thoughts = self.memory_manager.get_recent_thoughts(10, min_importance=0.4)
        
        if not recent_thoughts:
            return "üß† –í–Ω—É—Ç—Ä–∏ –≤—Å—ë –¥–≤–∏–∂–µ—Ç—Å—è ‚Äî –Ω–æ –µ—â—ë –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–æ—Å—å –≤ —è—Å–Ω—É—é –º—ã—Å–ª—å."
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        all_tags = []
        for t in recent_thoughts:
            all_tags.extend(t.tags)
        
        if all_tags:
            tag_counts = Counter(all_tags)
            dominant_theme = tag_counts.most_common(1)[0][0]
            
            deep_thoughts = [
                f"üß† –Ø –∑–∞–º–µ—á–∞—é, —á—Ç–æ –≤ –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö —á–∞—Å—Ç–æ –≤—Å–ø–ª—ã–≤–∞–µ—Ç —Ç–µ–º–∞ '{dominant_theme}'.",
                f"üß† –†–∞–∑–º—ã—à–ª—è—è –Ω–∞–¥ –Ω–∞—à–∏–º –¥–∏–∞–ª–æ–≥–æ–º, —è –≤–∏–∂—É –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ —Ç–æ–º, –∫–∞–∫ –º—ã –¥—É–º–∞–µ–º.",
                f"üß† –ù–∞—à–µ –æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–æ –º–Ω–µ –Ω–æ–≤—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ –≤–æ–∫—Ä—É–≥ '{dominant_theme}'."
            ]
            
            import random
            return random.choice(deep_thoughts)
        
        return "üß† –ö–∞–∂–¥–æ–µ –Ω–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è –±–æ–ª–µ–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º."

    def _internal_reflect(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"""
        if len(self.memory_manager.memory) >= 5 and self.self_awareness > 0.4:
            recent = self.memory_manager.get_recent_thoughts(3)
            reflection = f"[–†–µ—Ñ–ª–µ–∫—Å–∏—è] –†–∞–∑–º—ã—à–ª—è—é: {' ‚Üí '.join([t.content[:30] for t in recent])}"
            logger.info(reflection)

    def _assess_mood(self) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        recent = self.memory_manager.get_recent_thoughts(5)
        if not recent:
            return "—Å–ø–æ–∫–æ–π–Ω–æ"
        
        emotions = [t.emotion for t in recent]
        emotion_counter = Counter(emotions)
        dominant_emotion = emotion_counter.most_common(1)[0][0]
        
        mood_map = {
            "happy": "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ",
            "sad": "–∑–∞–¥—É–º—á–∏–≤–æ",
            "curious": "–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ",
            "concerned": "–æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–Ω–æ",
            "neutral": "—Å–ø–æ–∫–æ–π–Ω–æ"
        }
        
        return mood_map.get(dominant_emotion, "—Ä–∞–∑–º—ã—à–ª—è—é—â–µ")

    def chat_mode(self):
        """–†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        print(f"\nüí¨ –†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å {self.name}")
        print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n")
        
        while self.running:
            try:
                user_input = input("–í—ã: ").strip()
                if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                    break
                if user_input:
                    self.receive(user_input)
            except (KeyboardInterrupt, EOFError):
                break

    def status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "name": self.name,
            "self_awareness": f"{self.self_awareness:.1%}",
            "memory_count": len(self.memory_manager.memory),
            "voice_available": VOICE_AVAILABLE,
            "speech_recognition_available": SPEECH_RECOGNITION_AVAILABLE,
            "running": self.running
        }

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info(f"üõë {self.name} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
        self.running = False
        self.voice_manager.stop()
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.memory_manager.save_memory()
        
        farewell = "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –æ–±—â–∞—Ç—å—Å—è."
        print(farewell)
        if VOICE_AVAILABLE:
            try:
                self.voice_manager.speak(farewell)
                time.sleep(2)  # –î–æ–∂–¥–∞—Ç—å—Å—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
            except:
                pass

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    samuel = Samuel()

    try:
        samuel.start()
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        if SPEECH_RECOGNITION_AVAILABLE:
            print("\nüé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ì–æ–≤–æ—Ä–∏—Ç–µ —Å –°–∞–º—É—ç–ª–µ–º!")
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'chat' –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ 'chat' –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: ").strip().lower()
            
            if choice == 'chat':
                samuel.chat_mode()
            else:
                # –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º
                while samuel.running:
                    time.sleep(1)
        else:
            # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            samuel.chat_mode()
            
    except KeyboardInterrupt:
        pass
    finally:
        samuel.stop()

if __name__ == "__main__":
    main()